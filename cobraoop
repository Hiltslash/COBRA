#!/usr/bin/env python3
from os import system
import sys
import re
import shlex

class Runtime:
    def __init__(self):
        self.variables = []
        self.functions = []
        self.commands = []
        self.isCreatingFunction = False

    def createVariable(self, key, vartype, value):
        self.variables.append({"Key": key, "Type": vartype, "Value": value})

runtime = Runtime()

class Command:
    def __init__(self, name, arguments, exec_code):
        self.name = name
        self.arguments = arguments
        self.exec = exec_code
        runtime.commands.append(self)

    def execute(self, *xvalue):
        value = []

        # Argument count validation
        if isinstance(self.arguments, list):
            expected = len(self.arguments)
            received = len(xvalue)
            if expected != received:
                raise ValueError(f"[ERROR] Command '{self.name}' expects {expected} arguments but got {received}: {xvalue}")

        for thing in xvalue:
            # Replace any @VariableName in the string
            def replace_var(match):
                varname = match.group(1)
                match_var = next((v for v in runtime.variables if v["Key"] == varname), None)
                if match_var:
                    return str(match_var["Value"])
                else:
                    raise ValueError(f"[ERROR] Variable '@{varname}' not found in runtime.")

            # Replace all instances of @VarName
            new_thing = re.sub(r"@(\w+)", replace_var, thing)
            value.append(new_thing)

        if isinstance(self.arguments, list):
            local_vars = dict(zip(self.arguments, value))
        else:
            local_vars = {self.arguments: value[0]}

        exec_env = {"runtime": runtime}

        # Debug logging (can comment out if not needed)
        #print(f"[DEBUG] Executing '{self.name}' with locals: {local_vars}")

        exec(self.exec, exec_env, local_vars)
        return local_vars.get("result", None)


# Built-in commands
show = Command("show", "message", 'print(message)')

createVariable = Command(
    "cvar",
    ["key", "vartype", "value"],
    "runtime.createVariable(key, vartype, value)"
)

calculate = Command(
    "calc",
    ["num1", "operator", "num2"],
    """
if operator == '+':
    result = float(num1) + float(num2)
elif operator == '-':
    result = float(num1) - float(num2)
elif operator == '*':
    result = float(num1) * float(num2)
elif operator == '/':
    result = float(num1) / float(num2)
else:
    result = 'Invalid operator'
print(result)
"""
)

# Argument parsing for script
if (True):
    if len(sys.argv) > 1:
        filename = sys.argv[1]
    else:
        print("Error: No filename provided.")
        sys.exit(1)

    if not filename.endswith('.coil'):
        print("Error: Cobra scripts must have a .coil extension.")
        sys.exit(1)

def main():
    with open(filename, "r") as file:
        scriptlines = file.read().splitlines()

    for line in scriptlines:
        if not line.strip():  # Skip blank lines
            continue

        sectors = shlex.split(line)
        command_name = sectors[0]
        arguments = sectors[1:]

        cmd_obj = next((c for c in runtime.commands if c.name == command_name), None)
        if cmd_obj:
            try:
                cmd_obj.execute(*arguments)
            except Exception as e:
                print(f"[RUNTIME ERROR] {e}")
                sys.exit(1)
        else:
            print(f"[ERROR] Unknown command: {command_name}")
            sys.exit(1)

main()
