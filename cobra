#!/usr/bin/env python3

import os
from os import system as syst
import sys
from time import sleep as wait
import shlex
def clear(): syst("clear")
variables = {"calresult" : 0}
def checkvar(string):
    if "var" in string and type(string) == str:
        donotuse, important = parse(string)
        importants = variables[important]
        return importants
    else:
        return string
#Comment on line 15
def ifcondition(condition, exresult, thencommand, *thenarguments):
    conditionvar = checkvar(condition)
    exresultvar = checkvar(exresult)
    if str(conditionvar) == str(exresultvar):
        if thencommand in commands:
            commands[thencommand](*thenarguments)
    else:
        pass


def calculate(numberone, operation, numbertwo, storevariable):
    numberone = checkvar(numberone)
    numbertwo = checkvar(numbertwo)
    operation = checkvar(operation)
    try:
        numberone = int(numberone)
        numbertwo = int(numbertwo)
        if operation == "*":
            result = numberone * numbertwo
        elif operation == "/":
            result = numberone / numbertwo
        elif operation == "+":
            result = numberone + numbertwo
        elif operation == "-":
            result = numberone - numbertwo
        elif operation == "#":
            result = numberone ** numbertwo
        else:
            print(f"Operation not found ({operation}) VALID OPERATIONS: +,*,-,#,/.")
            result = None
        variables[storevariable] = result
    except ValueError:
        print("VALUE ERROR: PLEASE PROVIDE TWO INTEGERS")
        raise ValueError

def waittime(seconds):
    wait(int(seconds))
def show(argument):
    if "var" in argument:
        dontuse, argument = parse(argument)
        print(variables[argument])
    else:
        print(argument)

def cvar(name, value):
    try:
        int(value)
    except ValueError:
        str(value)
    variables[name] = value

def takeinput(variable, message):
    variables[variable] = input(str(message))

def forloop(times, command, *arguments):
    for i in range(int(times)):
        commands[command](*arguments)
commands =  {
    "show" : show,
    "cvar" : cvar,
    "cal" : calculate,
    "clear" : clear,
    "input" : takeinput,
    "for" : forloop,
    "wait" : waittime,
    "if" : ifcondition
}

if len(sys.argv) > 1:
    filename = sys.argv[1]
else:
    print("Error: No filename provided.")
    sys.exit(1)
if not filename.endswith('.coil'):
    print("Error: Cobra scripts must have a .coil extension.")
    sys.exit(1)

def parse(line):
    if len(line) > 0:
        shlexedline = shlex.split(line)
        command = shlexedline[0]
        try:
            if shlexedline[2]:
                arguments = shlexedline[1:]
            else:
                arguments = shlexedline[1]
        except IndexError:
            arguments = shlexedline[1]
        return command, arguments

def main():
    with open(filename, "r") as file:
        for line in file:
            if line:
                command, arguments = parse(line)
                if command in commands:
                    try:
                        if command.lower() == "show":
                            show(arguments)
                        elif command.lower() == "input":
                            takeinput(*arguments)
                        elif command.lower() == "for":
                            forloop(*arguments)
                        elif command.lower() == "wait":
                            waittime(arguments)
                        elif command.lower() == "if":
                            ifcondition(*arguments)
                        elif command.lower() == "cvar":
                            cvar(*arguments)
                        elif command.lower() == "cal":
                            calculate(*arguments)
                        elif command.lower() == "clear":
                            clear()
                    except TypeError as e:
                        raise TypeError
                else:
                    print(f"Syntax error: {command} command not found in base.")

main()
